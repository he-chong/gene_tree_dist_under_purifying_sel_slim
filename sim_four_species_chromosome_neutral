initialize() {  // This script is modified from a recipe of SLiM manual
    initializeSLiMOptions(nucleotideBased=T);
    initializeTreeSeq();
    initializeMutationTypeNuc("m1", 0.5, "f", 0.0); // strictly neutral mutations
    initializeGenomicElementType("g1", m1, 1, mmJukesCantor(1e-7)); // all mutations are neutral
    // Generate random genes along an approximately 20Mb chromosome
    base = 0;
    while (base < 2e7) {
    // make an intergenic region
    intergenic_length = asInteger(rlnorm(1, log(100000), log(3))) + 1;
    initializeGenomicElement(g1, base, base + intergenic_length - 1);
    base = base + intergenic_length;
    // make an exon
    exon_length = asInteger(rlnorm(1, log(100), log(2))) + 1;
    initializeGenomicElement(g1, base, base + exon_length - 1);
    base = base + exon_length;
    // make additional intron-exon pairs
    do
    {
    intron_length = asInteger(rlnorm(1, log(1000), log(2))) + 10;
    initializeGenomicElement(g1, base, base + intron_length - 1);
    base = base + intron_length;

    exon_length = asInteger(rlnorm(1, log(100), log(2))) + 1;
    initializeGenomicElement(g1, base, base + exon_length - 1);
    base = base + exon_length;
    }
    while (runif(1) < 0.7); // 30% probability of stopping
    }
    // final non-coding region
    intergenic_length = asInteger(rlnorm(1, log(100000), log(3))) + 1;
    initializeGenomicElement(g1, base, base + intergenic_length - 1);
    base = base + intergenic_length;
    // single recombination rate
    initializeRecombinationRate(1.25e-7);
    initializeAncestralNucleotides(randomNucleotides(base));
}
1 early()
{
    sim.addSubpop("p0", 400);
}
8000 early()
{
    sim.addSubpopSplit("p1", 400, p0);
}
16000 early()
{
    sim.addSubpopSplit("p2", 400, p1);
    p1.setSubpopulationSize(pop_size_1);
}
16016 early()
{
    sim.addSubpopSplit("p3", pop_size_3, p2);
    p2.setSubpopulationSize(pop_size_2);
}
22416 late()
{
    v0 = p0.sampleIndividuals(5).genomes;
    v1 = p1.sampleIndividuals(5).genomes;
    v2 = p2.sampleIndividuals(5).genomes;
    v3 = p3.sampleIndividuals(5).genomes;
    v0.outputVCF(out_vcf_0, simplifyNucleotides=T);
    v1.outputVCF(out_vcf_1, simplifyNucleotides=T);    
    v2.outputVCF(out_vcf_2, simplifyNucleotides=T);
    v3.outputVCF(out_vcf_3, simplifyNucleotides=T);    

    sim.treeSeqOutput(O);
}
